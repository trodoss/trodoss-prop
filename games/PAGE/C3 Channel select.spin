conSPI_SEL_CLK            = 8  ' used to clock the SPI counter that feeds 4-bit value to SPI selection decoder, clocks on rising edgeSPI_SEL_CLR            = 25SPI_MOSI               = 9  ' SPI master out serial in to slaveSPI_MISO               = 10 ' SPI master in serial out from slave, 10 for good C3, change to 7 for BROKEN C3 with YELLOW jumper.SPI_SCK                = 11PUB SPI_Init{{This function initializes the SPI IO's, counter, and mux, selects channel 0 and returns.PARMS: none.RETURNS: nothing.}}' set SPI mux counter IOs upDIRA[SPI_SEL_CLK] := 1 ' set to outputOUTA[SPI_SEL_CLK] := 0DIRA[SPI_SEL_CLR] := 1 ' set to outputOUTA[SPI_SEL_CLR] := 0 ' CLR counterOUTA[SPI_SEL_CLR] := 1 ' allow countingOUTA[SPI_MOSI] := 0 ' set to LOWOUTA[SPI_SCK] := 0 ' set to LOWDIRA[SPI_MOSI] := 1 ' set to outputDIRA[SPI_MISO] := 0 ' set to inputDIRA[SPI_SCK] := 1 ' set to output' set SPI to NULL channel 0selectc( 0 )' end SPI_InitPUB selectc( channel ){{This function sets the active SPI channel chip select on the SPI mux, this is accomplished byfirst resetting the SPI counter that feeds the SPI select decoder, then up counting therequested number of channels.PARMS:channel : channel 0 to 7 to enable where the channels are defined as follows0 - NULL channel, disables all on/off board devices.1 - 32K SRAM Bank 0.2 - 32K SRAM Bank 1.3 - 1MB FLASH Memory.4 - MCP3202 2-Channel 12-bit A/D.5 - Micro SD Card.6 - Header Interface SPI6.7 - Header Interface SPI7.RETURNS: nothing.}}' requesting channel 0? If so, easy resetif (channel == 0)' clear the 161 OUTA[SPI_SEL_CLR] := 0 ' CLR counter OUTA[SPI_SEL_CLR] := 1 ' allow counting return' else non-null channel, count up to channel...' first reset the SPI channel counter' clear the 161OUTA[SPI_SEL_CLR] := 0 ' CLR counterOUTA[SPI_SEL_CLR] := 1 ' allow counting' now increment to requested channel' clock the 161OUTA[SPI_SEL_CLK] := 0repeat channel OUTA[SPI_SEL_CLK] := 1 OUTA[SPI_SEL_CLK] := 0' end SPI_Select_Channel